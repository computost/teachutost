/* THIS (.ts) FILE IS GENERATED BY TypedSignalR.Client.TypeScript */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type { HubConnection, IStreamResult, Subject } from '@microsoft/signalr';
import type { IWeatherForecastHub, IWeatherForecastClient } from './MyTurborepo.Apps.Api';
import type { WeatherForecast } from '../MyTurborepo.Apps.Api';


// components

export type Disposable = {
    dispose(): void;
}

export type HubProxyFactory<T> = {
    createHubProxy(connection: HubConnection): T;
}

export type ReceiverRegister<T> = {
    register(connection: HubConnection, receiver: T): Disposable;
}

type ReceiverMethod = {
    methodName: string,
    method: (...args: any[]) => void
}

class ReceiverMethodSubscription implements Disposable {

    public constructor(
        private connection: HubConnection,
        private receiverMethod: ReceiverMethod[]) {
    }

    public readonly dispose = () => {
        for (const it of this.receiverMethod) {
            this.connection.off(it.methodName, it.method);
        }
    }
}

// API

export type HubProxyFactoryProvider = {
    (hubType: "IWeatherForecastHub"): HubProxyFactory<IWeatherForecastHub>;
}

export const getHubProxyFactory = ((hubType: string) => {
    if(hubType === "IWeatherForecastHub") {
        return IWeatherForecastHub_HubProxyFactory.Instance;
    }
}) as HubProxyFactoryProvider;

export type ReceiverRegisterProvider = {
    (receiverType: "IWeatherForecastClient"): ReceiverRegister<IWeatherForecastClient>;
}

export const getReceiverRegister = ((receiverType: string) => {
    if(receiverType === "IWeatherForecastClient") {
        return IWeatherForecastClient_Binder.Instance;
    }
}) as ReceiverRegisterProvider;

// HubProxy

class IWeatherForecastHub_HubProxyFactory implements HubProxyFactory<IWeatherForecastHub> {
    public static Instance = new IWeatherForecastHub_HubProxyFactory();

    private constructor() {
    }

    public readonly createHubProxy = (connection: HubConnection): IWeatherForecastHub => {
        return new IWeatherForecastHub_HubProxy(connection);
    }
}

class IWeatherForecastHub_HubProxy implements IWeatherForecastHub {

    public constructor(private connection: HubConnection) {
    }
}


// Receiver

class IWeatherForecastClient_Binder implements ReceiverRegister<IWeatherForecastClient> {

    public static Instance = new IWeatherForecastClient_Binder();

    private constructor() {
    }

    public readonly register = (connection: HubConnection, receiver: IWeatherForecastClient): Disposable => {

        const __weatherForecastUpdated = (...args: [WeatherForecast]) => receiver.weatherForecastUpdated(...args);

        connection.on("WeatherForecastUpdated", __weatherForecastUpdated);

        const methodList: ReceiverMethod[] = [
            { methodName: "WeatherForecastUpdated", method: __weatherForecastUpdated }
        ]

        return new ReceiverMethodSubscription(connection, methodList);
    }
}

